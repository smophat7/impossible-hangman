@page "/"
@using System.Text
@using ImpossibleHangman_Blazor.Data

<PageTitle>Impossible Hangman</PageTitle>

<div>
	@if (!_gameRunning)
	{
		<div class="whole-page d-flex">
			<div class="my-auto mx-auto">
				<GameSettingsForm @ref="gameSettingsForm" OnFormSubmit="@StartGame" />
				<p class="text-danger">@(DictionaryErrorMessage)</p>
			</div>
		</div>
	}
	else
	{
		<div class="whole-page d-flex">
			<div class="my-auto w-100">
				@if(_wonGame)
				{
					<div class="text-center">
						<h1>Congrats, you did the impossible!</h1>
						<h3>The word was "@_currentWord"</h3>
						<button type="button" class="btn btn-primary btn-lg mt-2" @onclick="@ResetGame">Play again?</button>
					</div>
				}
				else if(_lostGame)
				{
					<div class="text-center">
						<h1>That's embarrassing, you lost...</h1>
						<h3 class="text-center">@_currentWord</h3>
						<h3>The word was "@_currentWordSet.First()"</h3>
						<button type="button mt-2" class="btn btn-primary btn-lg my-2" @onclick="@ResetGame">Try again?</button>
					</div>
				}
				else
				{
					<h1 class="text-center">@_currentWord</h1>
					<h4 class="text-center mb-3 mb-5 @(_lives < 3 ? "text-danger" : "")">Lives: @_lives</h4>
					<div class="mt-5">
						<div class="row my-3 g-0 justify-content-center">
							<div class="col text-center">
								<a role="button" class="btn btn-size @(_guessedLetters.Contains('q') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('q')">Q</a>
							</div>
							<div class="col text-center">
								<a role="button" class="btn btn-size @(_guessedLetters.Contains('w') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('w')">W</a>
							</div>
							<div class="col text-center">
								<a role="button" class="btn btn-size @(_guessedLetters.Contains('e') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('e')">E</a>
							</div>
							<div class="col text-center">
								<a role="button" class="btn btn-size @(_guessedLetters.Contains('r') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('r')">R</a>
							</div>
							<div class="col text-center">
								<a role="button" class="btn btn-size @(_guessedLetters.Contains('t') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('t')">T</a>
							</div>
							<div class="col text-center">
								<a role="button" class="btn btn-size @(_guessedLetters.Contains('y') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('y')">Y</a>
							</div>
							<div class="col text-center">
								<a role="button" class="btn btn-size @(_guessedLetters.Contains('u') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('u')">U</a>
							</div>
							<div class="col text-center">
								<a role="button" class="btn btn-size @(_guessedLetters.Contains('i') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('i')">I</a>
							</div>
							<div class="col text-center">
								<a role="button" class="btn btn-size @(_guessedLetters.Contains('o') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('o')">O</a>
							</div>
							<div class="col text-center">
								<a role="button" class="btn btn-size @(_guessedLetters.Contains('p') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('p')">P</a>
							</div>
						</div>
						<div class="row my-3 g-0 justify-content-center">
							<div class="col text-center">
								<a role="button" class="btn btn-size @(_guessedLetters.Contains('a') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('a')">A</a>
							</div>
							<div class="col text-center">
								<a role="button" class="btn btn-size @(_guessedLetters.Contains('s') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('s')">S</a>
							</div>
							<div class="col text-center">
								<a role="button" class="btn btn-size @(_guessedLetters.Contains('d') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('d')">D</a>
							</div>
							<div class="col text-center">
								<a role="button" class="btn btn-size @(_guessedLetters.Contains('f') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('f')">F</a>
							</div>
							<div class="col text-center">
								<a role="button" class="btn btn-size @(_guessedLetters.Contains('g') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('g')">G</a>
							</div>
							<div class="col text-center">
								<a role="button" class="btn btn-size @(_guessedLetters.Contains('h') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('h')">H</a>
							</div>
							<div class="col text-center">
								<a role="button" class="btn btn-size @(_guessedLetters.Contains('j') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('j')">J</a>
							</div>
							<div class="col text-center">
								<a role="button" class="btn btn-size @(_guessedLetters.Contains('k') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('k')">K</a>
							</div>
							<div class="col text-center">
								<a role="button" class="btn btn-size @(_guessedLetters.Contains('l') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('l')">L</a>
							</div>
						</div>
						<div class="row my-3 g-0 justify-content-center">
							<div class="col text-center">
								<a role="button" class="btn btn-size @(_guessedLetters.Contains('z') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('z')">Z</a>
							</div>
							<div class="col text-center">
								<a role="button" class="btn btn-size @(_guessedLetters.Contains('x') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('x')">X</a>
							</div>
							<div class="col text-center">
								<a role="button" class="btn btn-size @(_guessedLetters.Contains('c') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('c')">C</a>
							</div>
							<div class="col text-center">
								<a role="button" class="btn btn-size @(_guessedLetters.Contains('v') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('v')">V</a>
							</div>
							<div class="col text-center">
								<a role="button" class="btn btn-size @(_guessedLetters.Contains('b') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('b')">B</a>
							</div>
							<div class="col text-center">
								<a role="button" class="btn btn-size @(_guessedLetters.Contains('n') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('n')">N</a>
							</div>
							<div class="col text-center">
								<a role="button" class="btn btn-size @(_guessedLetters.Contains('m') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('m')">M</a>
							</div>
						</div>
					</div>
					<div>
						<div>
							<input class="form-check-input" type="checkbox" @bind="_viewSecrets" id="checkbox">
							<label class="form-check-label" for="checkbox">
								See how it works
							</label>
						</div>
						@if (_viewSecrets)
						{
							<div class="my-3">
								<h3>How it Works:</h3>
								<p>
									While not impossible, this game is designed to be highly frustrating. The game it actively working against you, as the word you are guessing
									is not actually selected until you make a guess. When a letter is guessed, any words with that letter are eliminated from the pool of words
									to choose from. When all of the words in the current pool contain the guessed letter, the guess is counted as correct and a smaller pool
									of words is selected in which that new letter is in a certain position within the word. Each guess can shrink the pool of viable words
									without being a successful guess.
								</p>
								<h5 class="my-2">Words in the current pool: @_currentWordSet.Count</h5>
								<ul class="list-group">
									@foreach (string word in _currentWordSet)
									{
										<li class="list-group-item">@word</li>
									}
								</ul>
							</div>
						}
					</div>
				}
			</div>
		</div>
	}
</div>

@code
{
	private const int LivesDefault = 10;
	private const int WordLengthDefault = 8;
	private const string DictionaryFileLocation = "./wwwroot/dictionary.txt";
	private string DictionaryErrorMessage { get; set; } = "";
	private bool _gameRunning { get; set; } = false;
	private bool _wonGame { get; set; } = false;
	private bool _lostGame { get; set; } = false;
	private bool _viewSecrets { get; set; } = false;
	private int _lives { get; set; } = LivesDefault;
	private int _wordLength { get; set; } = WordLengthDefault;
	private string _currentWord { get; set; } = "";
	private SortedSet<char> _guessedLetters = new();
	private HashSet<String> _currentWordSet = new();

	protected GameSettingsForm gameSettingsForm = new();

	protected void StartGame()
	{
		_lives = gameSettingsForm.Lives;
		_wordLength = gameSettingsForm.WordLength;

		DictionaryErrorMessage = "";
		try
		{
			_currentWordSet = new(File.ReadLines(DictionaryFileLocation).Where(x => x.Length == _wordLength));
			if (_currentWordSet.Count == 0)
			{
				DictionaryErrorMessage = "Our dictionary of available words actually had no words in it... Try refreshing the page.";
			}
			else
			{
				StringBuilder blankWord = new StringBuilder();
				for (int i = 0; i < _wordLength; i++)
				{
					blankWord.Append('-');
				}
				_currentWord = blankWord.ToString();

				_gameRunning = true;
			}
		}
		catch (Exception)
		{
			DictionaryErrorMessage = "Our dictionary of available words could not be loaded. Try refreshing the page.";
			InvokeAsync(StateHasChanged);
		}
	}

	private void ResetGame()
	{
		_gameRunning = false;
		_wonGame = false;
		_lostGame = false;
		_viewSecrets = false;
		_lives = LivesDefault;
		_wordLength = WordLengthDefault;
		_currentWord = "";
		_guessedLetters = new();
		_currentWordSet = new();
	}

	private void MakeGuess(char guess)
	{
		if (!_wonGame && !_lostGame)
		{
			StringBuilder sbGuess = new StringBuilder();
			sbGuess.Append(guess);
			String stringGuess = sbGuess.ToString().ToLower();
			guess = stringGuess[0];
			Dictionary<String, HashSet<String>> subsetDictionary = ImpossibleHangmanGame.Partition(guess, _currentWordSet);

			// Update CurrWordSet based on the partition results
			Dictionary<String, HashSet<String>> largestSubsets = ImpossibleHangmanGame.LargestSubset(subsetDictionary);
			if ((largestSubsets.Count == 1))
			{
				_currentWordSet = largestSubsets.First().Value;
			}
			else
			{
				_currentWordSet = ImpossibleHangmanGame.BestSubset(_wordLength, largestSubsets);
			}

			_guessedLetters.Add(guess);
			string oldWord = _currentWord;
			string potentialWord = _currentWordSet.First();
			_currentWord = ImpossibleHangmanGame.GetNewCurrWord(_currentWord, potentialWord, guess);

			// Guess didn't narrow down the results at all
			if (oldWord == _currentWord)
			{
				_lives--;
				if (_lives == 0)
				{
					_lostGame = true;
				}
			}
			// If they narrowed it down all the way and won
			else if (_currentWord == potentialWord)
			{
				_wonGame = true;
			}
		}
	}
}