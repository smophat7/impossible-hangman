@page "/"
@using System.Text
@using ImpossibleHangman_Blazor.Data

@*TODO: Eliminate extra files before pushing to GitHub*@

<PageTitle>Impossible Hangman</PageTitle>

<div>

	@if (!GameRunning)
	{
		<div>
			<label class="d-block my-3">
				Lives:
				<input type="number" size="4"@bind="LivesSetting" />
			</label>

			<label class="d-block my-3">
				Number of letters:
				<input type="number" size="4"@bind="WordLength" />
			</label>
			<button type="button" class="btn btn-primary btn-sm my-2" onclick="@StartGame">Start Game</button>
			@if (DisplayErrorMessage)
			{
				<p class="text-danger">Lives must be in the range 1-26. Number of letters must be in the range 2-29.</p>
			}
		</div>
	}
	else
	{
		<div>
			<h1 class="text-center">@CurrWord</h1>
			<h4 class="text-center mb-3 @(Lives < 3 ? "text-danger" : "")">Lives: @Lives</h4>
			<div>
				<div class="row my-3 g-0 justify-content-center">
					<div class="col text-center">
						<a role="button" class="btn btn-size @(GuessedLetters.Contains('q') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('q')">Q</a>
					</div>
					<div class="col text-center">
						<a role="button" class="btn btn-size @(GuessedLetters.Contains('w') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('w')">W</a>
					</div>
					<div class="col text-center">
						<a role="button" class="btn btn-size @(GuessedLetters.Contains('e') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('e')">E</a>
					</div>
					<div class="col text-center">
						<a role="button" class="btn btn-size @(GuessedLetters.Contains('r') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('r')">R</a>
					</div>
					<div class="col text-center">
						<a role="button" class="btn btn-size @(GuessedLetters.Contains('t') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('t')">T</a>
					</div>
					<div class="col text-center">
						<a role="button" class="btn btn-size @(GuessedLetters.Contains('y') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('y')">Y</a>
					</div>
					<div class="col text-center">
						<a role="button" class="btn btn-size @(GuessedLetters.Contains('u') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('u')">U</a>
					</div>
					<div class="col text-center">
						<a role="button" class="btn btn-size @(GuessedLetters.Contains('i') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('i')">I</a>
					</div>
					<div class="col text-center">
						<a role="button" class="btn btn-size @(GuessedLetters.Contains('o') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('o')">O</a>
					</div>
					<div class="col text-center">
						<a role="button" class="btn btn-size @(GuessedLetters.Contains('p') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('p')">P</a>
					</div>
				</div>
				<div class="row my-3 g-0 justify-content-center">
					<div class="col text-center">
						<a role="button" class="btn btn-size @(GuessedLetters.Contains('a') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('a')">A</a>
					</div>
					<div class="col text-center">
						<a role="button" class="btn btn-size @(GuessedLetters.Contains('s') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('s')">S</a>
					</div>
					<div class="col text-center">
						<a role="button" class="btn btn-size @(GuessedLetters.Contains('d') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('d')">D</a>
					</div>
					<div class="col text-center">
						<a role="button" class="btn btn-size @(GuessedLetters.Contains('f') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('f')">F</a>
					</div>
					<div class="col text-center">
						<a role="button" class="btn btn-size @(GuessedLetters.Contains('g') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('g')">G</a>
					</div>
					<div class="col text-center">
						<a role="button" class="btn btn-size @(GuessedLetters.Contains('h') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('h')">H</a>
					</div>
					<div class="col text-center">
						<a role="button" class="btn btn-size @(GuessedLetters.Contains('j') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('j')">J</a>
					</div>
					<div class="col text-center">
						<a role="button" class="btn btn-size @(GuessedLetters.Contains('k') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('k')">K</a>
					</div>
					<div class="col text-center">
						<a role="button" class="btn btn-size @(GuessedLetters.Contains('l') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('l')">L</a>
					</div>
				</div>
				<div class="row my-3 g-0 justify-content-center">
					<div class="col text-center">
						<a role="button" class="btn btn-size @(GuessedLetters.Contains('z') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('z')">Z</a>
					</div>
					<div class="col text-center">
						<a role="button" class="btn btn-size @(GuessedLetters.Contains('x') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('x')">X</a>
					</div>
					<div class="col text-center">
						<a role="button" class="btn btn-size @(GuessedLetters.Contains('c') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('c')">C</a>
					</div>
					<div class="col text-center">
						<a role="button" class="btn btn-size @(GuessedLetters.Contains('v') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('v')">V</a>
					</div>
					<div class="col text-center">
						<a role="button" class="btn btn-size @(GuessedLetters.Contains('b') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('b')">B</a>
					</div>
					<div class="col text-center">
						<a role="button" class="btn btn-size @(GuessedLetters.Contains('n') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('n')">N</a>
					</div>
					<div class="col text-center">
						<a role="button" class="btn btn-size @(GuessedLetters.Contains('m') ? "disabled btn-secondary" : "btn-primary")" @onclick="() => MakeGuess('m')">M</a>
					</div>
				</div>
			</div>
			<div>
				<input class="form-check-input" type="checkbox" @bind="ViewSecrets" id="checkbox">
				<label class="form-check-label" for="checkbox">
					View secrets
				</label>
			</div>
			@if (ViewSecrets)
			{
				<div class="my-3">
					<h3>How it Works:</h3>
					<p>While not impossible, this game is designed to be highly frustrating. The game it actively working against you, as the word you are guessing
						is not actually selected until you make a guess. When a letter is guessed, any words with that letter are eliminated from the pool of words
						to choose from. When all of the words in the current pool contain the guessed letter, the guess is counted as correct and a smaller pool
						of words is selected in which that new letter is in a certain position within the word. Each guess can shrink the pool of viable words
						without being a successful guess.
					</p>
					<h5 class="my-2">Words in the current pool: @CurrWordSet.Count</h5>
					<ul class="list-group">
						@foreach (string word in CurrWordSet)
						{
							<li class="list-group-item">@word</li>
						}
					</ul>
				</div>
			}
		</div>
	}
</div>

@code
{
	private bool GameRunning = false;
	private bool DisplayErrorMessage = false;
	private bool ViewSecrets = false;
	// TODO: Don't need to use LivesSetting, can just use Lives like WordLength is the same for both.
	private int LivesSetting { get; set; } = 10;
	private int WordLength { get; set; } = 8;
	private int Lives { get; set; }
	private string CurrWord { get; set; }
	private SortedSet<char> GuessedLetters = new();
	private HashSet<String> CurrWordSet = new();

	protected override void OnInitialized()
	{
	}

	private void StartGame()
	{
		if (Validate())
		{
			CurrWordSet = new(File.ReadLines("dictionary.txt").Where(x => x.Length == WordLength));
			if (CurrWordSet.Count == 0)
			{
				// TODO: Display error message of sorts
			}
			else
			{
				StringBuilder blankWord = new StringBuilder();
				for (int i = 0; i < WordLength; i++)
				{
					blankWord.Append('-');
				}
				CurrWord = blankWord.ToString();

				Lives = LivesSetting;
				GameRunning = true;
			}
		}
	}

	private void MakeGuess(char guess)
	{
		StringBuilder sbGuess = new StringBuilder();
		sbGuess.Append(guess);
		String stringGuess = sbGuess.ToString().ToLower();
		guess = stringGuess[0];
		if (GuessedLetters.Contains(guess))
		{
			// TODO: Display error message of sorts
			//throw new Exception("You\'ve already guessed the letter " + guess);
		}
		else
		{
			Dictionary<String, HashSet<String>> subsetDictionary = ImpossibleHangmanGame.Partition(guess, CurrWordSet);

			// Update CurrWordSet based on the partition results
			Dictionary<String, HashSet<String>> largestSubsets = ImpossibleHangmanGame.LargestSubset(subsetDictionary);
			if ((largestSubsets.Count == 1))
			{
				CurrWordSet = largestSubsets.First().Value;
			}
			else
			{
				CurrWordSet = ImpossibleHangmanGame.BestSubset(WordLength, largestSubsets);
			}

			GuessedLetters.Add(guess);
			string oldWord = CurrWord;
			string potentialWord = CurrWordSet.First();
			CurrWord = ImpossibleHangmanGame.GetNewCurrWord(CurrWord, potentialWord, guess);

			// Guess didn't narrow down the results at all
			if (oldWord == CurrWord)
			{
				// TODO: Display "Sorry, there are no more ___that letter___s
				Lives--;
				if (Lives == 0)
				{
					// TODO: Tell them they lost!
					// TODO: Display some sort of reset button
				}
			}
			// If they narrowed it down all the way and won
			else if (CurrWord == potentialWord)
			{
				// TODO: Tell them they won
				// TODO: Display some sort of reset button
			}
		}
	}

	private bool Validate()
	{
		if (LivesSetting < 1 || LivesSetting > 26 || WordLength > 29 || WordLength < 2)
		{
			DisplayErrorMessage = true;
			return false;
		}
		DisplayErrorMessage = false;
		return true;
	}
}