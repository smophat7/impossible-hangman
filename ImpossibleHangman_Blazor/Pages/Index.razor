@page "/"
@using System.Text
@using ImpossibleHangman_Blazor.Data

<PageTitle>Impossible Hangman</PageTitle>

<div>
	<div class="whole-page d-flex">
		@if (!_gameRunning)
		{
			<div class="my-auto mx-auto">
				<GameSettingsForm @ref="gameSettingsForm" OnFormSubmit="@StartGame" />
				<p class="text-danger">@(_dictionaryErrorMessage)</p>
			</div>
		}
		else
		{
			<div class="my-auto w-100">
				@if (_wonGame)
				{
					<div class="text-center">
						<h1>Congrats, you did the impossible!</h1>
						<h3>The word was "@_currentWord"</h3>
						<button type="button" class="btn btn-primary btn-lg mt-2" @onclick="@ResetGame">Play again?</button>
					</div>
				}
				else if (_lostGame)
				{
					<div class="text-center">
						<h1>That's embarrassing, you lost...</h1>
						<h3 class="text-center">@_currentWord</h3>
						<h3>The word was "@_currentWordSet.First()"</h3>
						<button type="button mt-2" class="btn btn-primary btn-lg my-2" @onclick="@ResetGame">Try again?</button>
					</div>
				}
				else
				{
					<h1 class="text-center">@_currentWord</h1>
					<h4 class="text-center mb-3 mb-5 @(_lives < 3 ? "text-danger" : "")">Lives: @_lives</h4>
					<div>
						<div class="mt-5">
							<div class="row my-3 g-0 justify-content-center">
								<Key Letter="'Q'" @bind-GuessedLetters="@_guessedLetters" OnMakeGuess="@MakeGuess" />
								<Key Letter="'W'" @bind-GuessedLetters="@_guessedLetters" OnMakeGuess="@MakeGuess" />
								<Key Letter="'E'" @bind-GuessedLetters="@_guessedLetters" OnMakeGuess="@MakeGuess" />
								<Key Letter="'R'" @bind-GuessedLetters="@_guessedLetters" OnMakeGuess="@MakeGuess" />
								<Key Letter="'T'" @bind-GuessedLetters="@_guessedLetters" OnMakeGuess="@MakeGuess" />
								<Key Letter="'Y'" @bind-GuessedLetters="@_guessedLetters" OnMakeGuess="@MakeGuess" />
								<Key Letter="'U'" @bind-GuessedLetters="@_guessedLetters" OnMakeGuess="@MakeGuess" />
								<Key Letter="'I'" @bind-GuessedLetters="@_guessedLetters" OnMakeGuess="@MakeGuess" />
								<Key Letter="'O'" @bind-GuessedLetters="@_guessedLetters" OnMakeGuess="@MakeGuess" />
								<Key Letter="'P'" @bind-GuessedLetters="@_guessedLetters" OnMakeGuess="@MakeGuess" />
							</div>
							<div class="row my-3 g-0 justify-content-center">
								<Key Letter="'A'" @bind-GuessedLetters="@_guessedLetters" OnMakeGuess="@MakeGuess" />
								<Key Letter="'S'" @bind-GuessedLetters="@_guessedLetters" OnMakeGuess="@MakeGuess" />
								<Key Letter="'D'" @bind-GuessedLetters="@_guessedLetters" OnMakeGuess="@MakeGuess" />
								<Key Letter="'F'" @bind-GuessedLetters="@_guessedLetters" OnMakeGuess="@MakeGuess" />
								<Key Letter="'G'" @bind-GuessedLetters="@_guessedLetters" OnMakeGuess="@MakeGuess" />
								<Key Letter="'H'" @bind-GuessedLetters="@_guessedLetters" OnMakeGuess="@MakeGuess" />
								<Key Letter="'J'" @bind-GuessedLetters="@_guessedLetters" OnMakeGuess="@MakeGuess" />
								<Key Letter="'K'" @bind-GuessedLetters="@_guessedLetters" OnMakeGuess="@MakeGuess" />
								<Key Letter="'L'" @bind-GuessedLetters="@_guessedLetters" OnMakeGuess="@MakeGuess" />
							</div>
							<div class="row my-3 g-0 justify-content-center">
								<Key Letter="'Z'" @bind-GuessedLetters="@_guessedLetters" OnMakeGuess="@MakeGuess" />
								<Key Letter="'X'" @bind-GuessedLetters="@_guessedLetters" OnMakeGuess="@MakeGuess" />
								<Key Letter="'C'" @bind-GuessedLetters="@_guessedLetters" OnMakeGuess="@MakeGuess" />
								<Key Letter="'V'" @bind-GuessedLetters="@_guessedLetters" OnMakeGuess="@MakeGuess" />
								<Key Letter="'B'" @bind-GuessedLetters="@_guessedLetters" OnMakeGuess="@MakeGuess" />
								<Key Letter="'N'" @bind-GuessedLetters="@_guessedLetters" OnMakeGuess="@MakeGuess" />
								<Key Letter="'M'" @bind-GuessedLetters="@_guessedLetters" OnMakeGuess="@MakeGuess" />
							</div>
						</div>
					</div>
					<div class="px-3">
						<div>
							<input class="form-check-input" type="checkbox" @bind="_viewSecrets" id="checkbox">
							<label class="form-check-label" for="checkbox">
								See how it works
							</label>
						</div>
						@if (_viewSecrets)
						{
							<HowItWorks @bind-CurrentWordSet="@_currentWordSet" GuessedLetters="@_guessedLetters"/>
						}
					</div>
				}
			</div>
		}
	</div>
	<div class="text-center">
		Hangman icon created by <a href="https://www.flaticon.com/free-icons/hangman" title="hangman icons" target="_blank">surang - Flaticon</a>
	</div>
</div>

@code
{
	private const int LivesDefault = 10;
	private const int WordLengthDefault = 8;
	private const string DictionaryFileLocation = "./wwwroot/dictionary.txt";

	private string _dictionaryErrorMessage { get; set; } = "";
	private bool _gameRunning { get; set; } = false;
	private bool _wonGame { get; set; } = false;
	private bool _lostGame { get; set; } = false;
	private bool _viewSecrets { get; set; } = false;
	private int _lives { get; set; } = LivesDefault;
	private int _wordLength { get; set; } = WordLengthDefault;
	private string _currentWord { get; set; } = "";
	private SortedSet<char> _guessedLetters = new();
	private HashSet<String> _currentWordSet = new();

	protected GameSettingsForm gameSettingsForm = new();

	protected void StartGame()
	{
		_lives = gameSettingsForm.Lives;
		_wordLength = gameSettingsForm.WordLength;

		_dictionaryErrorMessage = "";
		try
		{
			_currentWordSet = new(File.ReadLines(DictionaryFileLocation).Where(x => x.Length == _wordLength));
			if (_currentWordSet.Count == 0)
			{
				_dictionaryErrorMessage = "Our dictionary of available words actually had no words in it... Try refreshing the page.";
			}
			else
			{
				StringBuilder blankWord = new StringBuilder();
				for (int i = 0; i < _wordLength; i++)
				{
					blankWord.Append('-');
				}
				_currentWord = blankWord.ToString();

				_gameRunning = true;
			}
		}
		catch (Exception)
		{
			_dictionaryErrorMessage = "Our dictionary of available words could not be loaded. Try refreshing the page.";
			InvokeAsync(StateHasChanged);
		}
	}

	private void ResetGame()
	{
		_gameRunning = false;
		_wonGame = false;
		_lostGame = false;
		_viewSecrets = false;
		_lives = LivesDefault;
		_wordLength = WordLengthDefault;
		_currentWord = "";
		_guessedLetters = new();
		_currentWordSet = new();
	}

	void MakeGuess(char guess)
	{
		if (!_wonGame && !_lostGame)
		{
			StringBuilder sbGuess = new StringBuilder();
			sbGuess.Append(guess);
			String stringGuess = sbGuess.ToString().ToLower();
			guess = stringGuess[0];
			Dictionary<String, HashSet<String>> subsetDictionary = ImpossibleHangmanGame.Partition(guess, _currentWordSet);

			// Update CurrWordSet based on the partition results
			Dictionary<String, HashSet<String>> largestSubsets = ImpossibleHangmanGame.LargestSubset(subsetDictionary);
			if ((largestSubsets.Count == 1))
			{
				_currentWordSet = largestSubsets.First().Value;
			}
			else
			{
				_currentWordSet = ImpossibleHangmanGame.BestSubset(_wordLength, largestSubsets);
			}

			_guessedLetters.Add(guess);
			string oldWord = _currentWord;
			string potentialWord = _currentWordSet.First();
			_currentWord = ImpossibleHangmanGame.GetNewCurrWord(_currentWord, potentialWord, guess);

			// Guess didn't narrow down the results at all
			if (oldWord == _currentWord)
			{
				_lives--;
				if (_lives == 0)
				{
					_lostGame = true;
				}
			}
			// If they narrowed it down all the way and won
			else if (_currentWord == potentialWord)
			{
				_wonGame = true;
			}
		}
	}
}