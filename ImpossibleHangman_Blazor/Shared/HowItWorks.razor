<div class="my-3">
	<h3>How it Works:</h3>
	<p>
		While not impossible, this game is designed to be highly frustrating (you're welcome) because the game is actively
		working against you. You aren't really guessing a single word, as each guess you make just shrinks a set of viable
		words in a way that minimizes your change of winning.
	</p>	
	<p>
		When you guess a letter, the word pool is partitioned into sets, each with the guessed letter at different
		positions. Preferably, a set exists where the guessed letter isn't present, costing you a life. If all the words
		left have that letter, the "correct" position is decided so the new set is as large as
		possible.
	</p>
	<h5 class="my-2">Words in the current pool: @CurrentWordSet.Count</h5>
	<ul class="list-group">
		@foreach (string word in CurrentWordSet)
		{
			<li class="list-group-item">
				@foreach(char letter in word)
				{
					<span style="@(GuessedLetters.Contains(letter) ? "font-weight:bold" : "")">@letter</span>
				}
			</li>
		}
	</ul>
</div>

@code {
	[Parameter] public HashSet<String> CurrentWordSet { get; set; } = new();
	[Parameter] public EventCallback<HashSet<String>> CurrentWordSetChanged { get; set; }
	[Parameter] public SortedSet<char> GuessedLetters { get; set; } = new();
}
